{"name":"build","main":"./lib/build","version":"0.26.0","description":"Build your current project, directly from Atom","repository":{"type":"git","url":"https://github.com/noseglid/atom-build"},"license":"MIT","engines":{"atom":">=0.50.0"},"dependencies":{"lodash":"^2.4.1","ansi-to-html":"^0.3.0","temp":"^0.8.1","fs-plus":"^2.4.0","atom-space-pen-views":"^2.0.3","xregexp":"^2.0.0"},"devDependencies":{"jshint":"^2.5.11","jscs":"^1.9.0"},"scripts":{"test":"jscs lib/*.js spec/*.js && ./node_modules/.bin/jshint lib/*.js spec/*.js"},"readme":"# Atom Build package\n[![Build Travis](https://travis-ci.org/noseglid/atom-build.svg?branch=master)](https://travis-ci.org/noseglid/atom-build)\n[![Gitter chat](https://badges.gitter.im/noseglid/atom-build.svg)](https://gitter.im/noseglid/atom-build)\n\nAutomatically build your project inside your new favorite editor, Atom.\n\n  * `cmd-alt-b` / `ctrl-alt-b` builds your project.\n  * `cmd-alt-g` / `ctrl-alt-g` jumps to cause of build error. See [Error Matching](#error-match).\n  * `escape` terminates build\n\n![work work](https://noseglid.github.io/atom-build.gif)\n\nSupported build tools:\n\n  1. Custom by [specifying your own build command](#custom-build-command)\n  1. [NodeJS](http://nodejs.org) (runs `npm install`) - if `package.json` exists where `engines['node']` is set\n  1. [Atom](http://atom.io) (runs `apm install`) - if `package.json` exists where `engines['atom']` is set\n  1. [Grunt](http://gruntjs.com/) - if `Gruntfile.js` exists\n  1. [Gulp](http://gulpjs.com/) - if `gulpfile.js` exists\n  1. [GNU Make](https://www.gnu.org/software/make/) - if `Makefile` exists\n  1. [Elixir](http://elixir-lang.org/) - if `mix.exs` exists\n  1. [Cargo](http://elixir-lang.org/) - if `Cargo.toml` exists\n    * Supports error matching.\n\nIf multiple viable build options are found, `atom-build` will\nprioritise according to the list above. For instance, if `package.json` and\n`Gruntfile.js` are both available in the root folder, `npm install` will be\nexecuted by `atom-build`.\n\nIf you need to run `grunt`, `gulp` or other tool to build you project, then you can utilize the [postinstall-script](https://www.npmjs.org/doc/misc/npm-scripts.html) of package.json. This will also help you if grunt is run as a node module since it\nwill be downloaded (via `npm install`) prior.\n\n<a name=\"custom-build-command\"></a>\n## Specifying your own build command\n\nIf the built-in defaults are not enough to suit your needs, you can specify\nexactly what to execute. Create a file named `.atom-build.json` in your project root:\n\n    {\n      \"cmd\": \"<command to execute>\",\n      \"args\": [ \"<argument1>\", \"<argument2>\", ... ],\n      \"sh\": true,\n      \"cwd\": \"<current working directory for `cmd`>\",\n      \"env\": {\n        \"VARIABLE1\": \"VALUE1\",\n        \"VARIABLE2\": \"VALUE2\",\n        ...\n      },\n      \"errorMatch\": \"^regexp$\"\n    }\n\nNote that if `sh` is false `cmd` must only be the executable - no arguments here. If the\nexecutable is not in your path, either fully qualify it or specify the path\nin you environment (e.g. by setting the `PATH` var appropriately on UNIX-like\nsystems).\n\n<a name=\"custom-build-config\"></a>\n### Configuration options\n\n  * `cmd` - **[required]** The executable command\n  * `args` - **[optional]** An array of arguments for the command\n  * `sh` - **[optional]** If `true`, the combined command and arguments will be passed to `/bin/sh`. Default `true`.\n  * `cwd` - **[optional]** The working directory for the command. E.g. what `.` resolves to.\n  * `env` - **[optional]** An array of environment variables and their values to set\n  * `errorMatch` - **[optional]** A regular expression to match output to a file, row and col. See [Error matching](#error-match) for details.\n\n### Replacements\n\nThe following parameters will be replaced in `cmd`, any entry in `args`, `cwd` and\nvalues of `env`. They should all be enclosed in curly brackets `{}`\n\n  * `{FILE_ACTIVE}` - Full path to the currently active file in Atom. E.g. `/home/noseglid/github/atom-build/lib/build.js`\n  * `{FILE_ACTIVE_PATH}` - Full path to the folder where the currently active file is. E.g. `/home/noseglid/github/atom-build/lib`\n  * `{FILE_ACTIVE_NAME}` - Full name and extension of active file. E.g., `build.js`\n  * `{FILE_ACTIVE_NAME_BASE}` - Name of active file WITHOUT extension. E.g., `build`\n  * `{PROJECT_PATH}` - Full path to the root of the project. This is normally the path Atom has as root. E.g `/home/noseglid/github/atom-build`\n  * `{REPO_BRANCH_SHORT}` - Short name of the current active branch (if project is backed by git). E.g `master` or `v0.9.1`.\n\n<a name=\"error-match\"></a>\n## Error matching\n\nError matching let's you specify a regular expression which captures\nthe output of your build command and opens the correct file, row and column of\nthe error. For instance:\n\n```bash\na.c:4:26: error: expected ';' after expression\n  printf(\"hello world\\n\")\n                         ^\n                         ;\n1 error generated.\n```\n\nWould be matched with the regular expression: `^(?<file>[^\\\\.]+.c):(?<line>\\\\d+):(?<col>\\\\d+)`.\nAfter the build has failed, pressing `cmd-alt-g` (OS X) or `ctrl-alt-g` (Linux/Windows), `a.c` would be\nopened and the cursor would be placed at row 4, column 26.\n\nNote the syntax for match groups. This is from the [XRegExp](http://xregexp.com/) package\nand has the syntax for named groups: `(?<name> RE )` where `name` would be the name of the group\nmatched by the regular expression `RE`.\n\nThe following named groups can be matched from the output:\n  * `file` - **[required]** the file to open. `(?<file> RE)`.\n  * `line` - **[optional]** the line the error resides on. `(?<line> RE)`.\n  * `col` - **[optional]** the column the error resides on. `(?<col> RE)`.\n\nSince the regular expression is written in a JSON file, backslashes must be escaped.\n","readmeFilename":"README.md","bugs":{"url":"https://github.com/noseglid/atom-build/issues"},"homepage":"https://github.com/noseglid/atom-build","_id":"build@0.26.0","_shasum":"f644d6eba0565c3c88d01ea15dc0aa3518bfeac2","_resolved":"file:../d-115225-11766-73o5e9/package.tgz","_from":"../d-115225-11766-73o5e9/package.tgz"}